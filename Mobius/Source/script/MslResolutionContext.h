/**
 * Class holding the bindings for functions and variables.
 * Basically a symbol table.
 *
 * There is normally one of these, a global symbol table maintained by
 * the environment.
 *
 * Optionally each interative console may create one of these and use
 * it to accululate non-exported functions and variables for use in
 * each successive console evaluation.
 *
 * It's sort of like a closure.
 *
 * Resolution contexts must be registered with the environment and will
 * be garbage collected so compilations that reference them can have
 * indefinite life.
 *
 */

#pragma once

#include <JuceHeader.h>

class MslResolutionContext
{
  public:

    MslResolutionContext(class MslGarbage* g);
    ~MslResolutionContext();

    // unique identifier for this context, generated by the environment
    juce::String id;

    class MslLinkage* find(juce::String name);
    
    class MslLinkage* intern(juce::String name, class MslFunction* f);
    class MslLinkage* intern(juce::String name, class MslVariableExport* v);

  private:

    class MslGarbage* garbage = nullptr;

    // the "symbol table"
    juce::OwnedArray<class MslLinkage> linkages;
    juce::HashMap<juce::String,class MslLinkage*> table;

    class MslLinkage* intern(juce::String name);
};


    

    
