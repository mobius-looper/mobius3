/**
 * Utility class that does runtime model mapping between
 * the UIAction/Query models used by the Mobius application
 * and the MslEnvironment models.
 */

#include <JuceHeader.h>

#include "../util/Trace.h"
#include "../util/Util.h"

#include "../model/UIAction.h"
#include "../model/Symbol.h"
#include "../model/ScriptProperties.h"

#include "MslEnvironment.h"
#include "ActionAdapter.h"

/**
 * Process an action on a symbol bound to an MSL script.
 *
 * This is what normally launches a new script session outside of a scriptlet.
 *
 * The context may be the shell when responding to a MIDI event or UI button
 * or it may be the kernel when responding to a MIDI event received
 * through the plugin interface or to an action generated by another
 * script session.
 *
 * You won't be here when a script just calls another script, that is
 * handled through direct linkage within the environment.
 *
 * The session starts in whichever context it is currently in, but it
 * may immediately transition to the other side.
 *
 * If the session runs to completion synchronously, without transitioning
 * or waiting it may either be discarded, or placed on the result list
 * for later inspection.  If the script has errors it is placed on the
 * result list so it can be shown in the ScriptConsole since the UIAction
 * does not have a way to return complex results.
 *
 * If the session suspends due to a wait or a transition, it is placed
 * on the appropriate session list by the MslConductor.
 *
 */
void ActionAdapter::doAction(MslEnvironment* env, MslContext* c, UIAction* action)
{
    // same sanity checking that should have been done by now
    Symbol* s = action->symbol;
    if (s == nullptr) {
        Trace(1, "MslEnironment: Action without symbol");
    }
    else if (s->script == nullptr) {
        Trace(1, "MslEnironment: Action with non-script symbol");
    }
    else if (s->script->mslLinkage == nullptr) {
        Trace(1, "MslEnironment: Action with non-MSL symbol");
    }    
    else {
        MslRequest req;

        req.linkage = s->script->mslLinkage;

        env->request(c, &req);

        // what and how results are conveyed needs thought
        CopyString(req.result.getString(), action->result, sizeof(action->result));
    }
}
