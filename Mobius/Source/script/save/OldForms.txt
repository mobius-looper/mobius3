    virtual void mslVisit(class MslFieldNode* obj) = 0;
    virtual void mslVisit(class MslFormNode* obj) = 0;
    virtual void mslVisit(class MslShowNode* obj) = 0;

    virtual class MslFieldNode* getField() {return nullptr;}
    virtual class MslFormNode* getForm() {return nullptr;}
    virtual class MslShowNode* getShow() {return nullptr;}
    
    bool isField() {return getField() != nullptr;}
    bool isForm() {return getForm() != nullptr;}
    bool isShow() {return getShow() != nullptr;}

//////////////////////////////////////////////////////////////////////
//
// Form
//
//////////////////////////////////////////////////////////////////////

/**
 * todo: this needs to be an MslScopedNode if it needs to support "private"
 * but could also handle that with a property which might be better in general.
 * would need unary properties though
 */
class MslFieldNode : public MslNode
{
  public:
    MslFieldNode(MslToken& t) : MslNode(t) {}
    virtual ~MslFieldNode() {}

    bool wantsToken(class MslParser* p, MslToken& t) override;
    MslPropertyNode* wantsProperty(class MslParser* p, MslToken& t) override;
    bool wantsNode(class MslParser* p, MslNode* node) override;

    juce::String name;
    bool wantsInitializer = false;
    juce::OwnedArray<MslPropertyNode> properties;
    
    MslFieldNode* getField() override {return this;}
    void visit(MslVisitor* v) override {v->mslVisit(this);}
    const char* getLogName() override {return "Field";}
};

class MslFormNode : public MslNode
{
  public:
    MslFormNode(MslToken& t) : MslNode(t) {}
    virtual ~MslFormNode() {}

    bool wantsToken(class MslParser* p, MslToken& t) override;

    bool wantsNode(class MslParser* p, MslNode* node) override {
        (void)p;
        bool wants = false;
        if (!hasArgs && node->isBlock() && node->token.value == "(") {
            hasArgs = true;
            wants = true;
        }
        else if (!hasBody && node->isBlock() && node->token.value == "{") {
            hasBody = true;
            wants = true;
        }
        return wants;
    }

    juce::String name;
    bool hasArgs = false;
    bool hasBody = false;
    
    MslFormNode* getForm() override {return this;}
    void visit(MslVisitor* v) override {v->mslVisit(this);}
    const char* getLogName() override {return "Form";}
    
    MslBlockNode* getBody() {
        MslBlockNode* body = nullptr;
        for (auto child : children) {
            MslBlockNode* b = child->getBlock();
            if (b != nullptr && child->token.value == "{") {
                body = b;
                break;
            }
        }
        return body;
    }
    MslBlockNode* getDeclaration() {
        MslBlockNode* decl = nullptr;
        for (auto child : children) {
            MslBlockNode* b = child->getBlock();
            if (b != nullptr  && child->token.value == "(") {
                decl = b;
                break;
            }
        }
        return decl;
    }
};

class MslShowNode : public MslNode
{
  public:
    MslShowNode(MslToken& t) : MslNode(t) {}
    virtual ~MslShowNode() {}

    bool wantsToken(class MslParser* p, MslToken& t) override;

    juce::String name;
    
    MslShowNode* getShow() override {return this;}
    void visit(MslVisitor* v) override {v->mslVisit(this);}
    const char* getLogName() override {return "Show";}
};

/**
 * Similar to MslVariableNode but not a ScopedNode
 */
bool MslFieldNode::wantsToken(MslParser* p, MslToken& t)
{
    (void)p;
    bool wants = false;
    
    if (name.length() == 0) {
        if (t.type == MslToken::Type::Symbol) {
            // take this as our name
            name =  t.value;
            wants = true;
        }
        else {
            p->errorSyntax(t, "Missing field name");
        }
    }
    else if (t.type == MslToken::Type::Operator &&
             t.value == "=") {
        // skip past this once we have a name
        wants = true;
        wantsInitializer = true;
    }

    return wants;
}

/**
 * Same as MslVariableNode but more
 */
MslPropertyNode* MslFieldNode::wantsProperty(MslParser* p, MslToken& t)
{
    (void)p;
    MslPropertyNode* pnode = nullptr;
    
    if (t.type == MslToken::Type::Symbol) {
        if (t.value == "type" ||
            t.value == "low" ||
            t.value == "high" ||
            t.value == "values" ||
            t.value == "label") {

            pnode = new MslPropertyNode(t);
            pnode->parent = this;
            properties.add(pnode);
        }
    }
    return pnode;
}

bool MslFieldNode::wantsNode(class MslParser* p, MslNode* node)
{
    bool wants = false;
    if (wantsInitializer) {
        if (node->operandable()) {
            wants = true;
            wantsInitializer = false;
        }
        else
          p->errorSyntax(node, "Missing field initializer");
    }
    return wants;
}

    void mslVisit(class MslFieldNode* obj) override;
    void mslVisit(class MslFormNode* obj) override;

    class MslFormNode* locateForm(juce::String name);
    
void MslSession::mslVisit(MslFieldNode* fnode)
{
    logVisit(fnode);

    // evaluate the properties
    stack->accumulator = true;
    MslStack* nextStack = pushNextProperty(fnode);
    if (nextStack == nullptr) {
        // ran out of properties
        MslValue* result = stack->childResults;
        stack->childResults = nullptr;

        MslForm::Field* f = new MslForm::Field();
        f->label = fnode->name;
        f->variable = fnode->name;

        // todo: validate size before we start
        if (fnode->properties.size() > 0 && results == nullptr)
          addError(fnode, "No child results for fields");
        else {
            for (auto prop : fnode->properties) {
                if (result == nullptr) {
                    addError(prop, "Missing property value");
                }
                else {
                    juce::String pname = prop->token.value;
                    if (pname == "label") {
                        f->label = juce::String(result->getString());
                    }
                    else if (pname == "type") {
                        const char* tname = result->getString();
                        if (StringEqual(tname, "int"))
                          f->type = MslForm::Field::TypeInt;
                        else if (StringEqual(tname, "bool"))
                          f->type = MslForm::Field::TypeBool;
                        else if (StringEqual(tname, "string"))
                          f->type = MslForm::Field::TypeString;
                        else {
                            addError(prop, "Invalid field type");
                        }
                    }
                    else if (pname == "low") {
                        f->low = result->getInt();
                    }
                    else if (pname == "high") {
                        f->high = result->getInt();
                    }
                    else if (pname == "values") {
                        addError(prop, "Values not implmeented");
                    }
                    else {
                        addError(prop, "Unhandled property");
                    }
                }
                    
                if (hasErrors())
                  break;
                else {
                    MslValue* v = result;
                    result = result->next;
                    pool->free(v);
                }
            }
        }

        MslForm* form = nullptr;
        // immediate parent is the property block, above that is the form
        if (!hasErrors() &&
            (stack->parent == nullptr ||
             stack->parent->parent == nullptr ||
             stack->parent->parent->form == nullptr))
            addError(fnode, "Unexpected stack structure, missing form");
        else
          form = stack->parent->parent->form;

        if (form == nullptr)
            delete f;
        else
          form->fields.add(f);

        popStack(nullptr);
    }
}

/**
 * Visiting these does nothing, and may not even get here if we
 * sift Forms like functions and variables.
 */
void MslSession::mslVisit(MslFormNode* fnode)
{
    logVisit(fnode);
}

void MslSession::mslVisit(MslShowNode* node)
{
    logVisit(node);

    if (stack->phase == 0) {
        // find the Form
        MslFormNode* fnode = locateForm(node->token.value);
        if (fnode != nullptr) {
            // todo: make sure we are in shell context
            MslForm* form = new MslForm();
            stack->form = form;
            stack->phase = 1;
            pushStack(fnode->getBody());
        }
    }
    else if (stack->phase == 1) {
        // back from fields
        // no child results, they will have put fields inside the form
        // send the form to the environment and wait
        if (context->mslForm(stack->form)) {
            stack->form->active = true;
        }
        else {
            addError(node, "Context din't want to do the form");
        }
    }
    else if (stack->phase == 2) {
        // back from the form wait
        // take what is in the form and assign it to variables
        // there is no return value
        popStack(nullptr);
    }
}

MslFormNode* MslSession::locateForm(juce::String name)
{
    (void)name;
    return nullptr;
}

    else if (t.value == "form")
      keyword = new MslFormNode(t);
    
    else if (t.value == "field")
      keyword = new MslFieldNode(t);
    

    // present a form
    // when finished the context is expected to call back to MslEnvironment::finishForm
    virtual bool mslForm(MslForm* form) = 0;

bool MslFormNode::wantsToken(MslParser* p, MslToken& t)
{
    (void)p;
    bool wants = false;
    if (name.length() == 0) {
        if (t.type == MslToken::Type::Symbol) {
            name =  t.value;
            wants = true;
        }
    }
    return wants;
}

bool MslShowNode::wantsToken(MslParser* p, MslToken& t)
{
    bool wants = false;
    if (name.length() == 0) {
        if (t.type == MslToken::Type::Symbol) {
            name = t.value;
            wants = true;
        }
        else {
            p->errorSyntax(t, "Invalid reference");
        }
    }
    return wants;
}

        else if (node->isForm()) {
            MslFormNode* form = node->getForm();
            line += "Form: " + form->name;
        }
        else if (node->isField()) {
            MslFieldNode* field = node->getField();
            line += "Field: " + field->name;
            // todo: any node should be able to have properties?
            if (field->properties.size() > 0) {
                console.add(line);
                for (auto prop : field->properties)
                  traceNode(prop, indent + 4);
                line = "";
            }
        }
