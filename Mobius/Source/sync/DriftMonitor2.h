/**
 * Another stab at drift monitoring during Host sync analysis.  I'm liking this oen better.
 *
 * Most synchronization sources generate a regular signal (clock, pulse, etc.) with a consistent
 * time distance between them.  These signals can be distilled into logical Beats at at standard
 * musical Tempo.
 *
 * To synchronize digital audio loops, it is important to have a stable tempo, where the tempo
 * can be distilled into a Beat Length in units of samples at the sample rate of the digital
 * audio stream.
 *
 * When synchronizing with a plugin host the beat signals usually remain stable but can have
 * some jitter due to floating point rounding inherent in the way hosts interact with plugins.
 * When synchronizing with MIDI beat signals are MUCH more variable and can have high jitter.
 * With any synchronization source, the tempo may change under the control of the user.
 *
 * Within the Mobius application, the purpose of the Sync Analyzers is to monitor the tempo
 * and beat signals from the source and to "normalize" those into beats thta will have a precice
 * length in samples.   Due to various factors such as floating point roundoff and the desire
 * to make beat lengths an even number of samples, the length of a normalized beat in real time
 * may be slighly different than the length of the source beats.  This difference is small but
 * can accumulate over time leading to Drift.  When Drift exceeds a threshold a Correction must
 * be made to realign the normalized beats with the source beats with a corresponding correction
 * in the "playback head" used to generate audio content in the application.
 *
 * The DriftMonitor works like this:
 *
 * When the sync source reaches a known point of reference called the Start Point, monitoring
 * state is Oriented.  After orientation, the source and normalized beats are aligned and there
 * is no drift.
 *
 * As beats are received from the source, or normalized beats are generated by the analyzer
 * they are given to the DriftMonitor.  The Monitor maintains two "beat streams" that represent
 * the number of audio stream samples that have elapsed since the Start Point.  The streams are
 * advanced by the number of samples that have elapsed since the last beat was received.  When
 * the beat counters of both streams are the same, the difference in these stream sample counts
 * is the amount of drift.
 */

#pragma once

class DriftMonitor2
{
  public:

    DriftMonitor2() {}
    ~DriftMonitor2() {}

    // reorient the monitor
    void orient();

    // record the reception of a source beat
    // the beat is timestamped with the current stream time plus the block offset
    void sourceBeat(int blockOffset);

    // record the generation of a normalized beat
    void normalizedBeat(int blockoffset);
    
    // advance the shared stream time by some number of samples
    // this is normally the block length of the audio stream
    void advance(int blockSize);

    int getDrift();

  private:

    // the number of samples that have elapsed since the Start Point
    int streamTime = 0;

    // the number of source beats that have elapsed
    int hostBeat = 0;

    // the stream time of the last host beat
    int hostBeatTime = 0;

    // beat number and stream time of the last normalized beat
    int normalizedBeat = 0;
    int normalizedBeatTime = 0;

    // last drift calculated
    int drift = 0;

};


    
