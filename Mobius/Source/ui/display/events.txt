
Events display under the loop meter and have historically used a little triangle
to indiciate where they are.

Time markers can in theory be cluttered and overlapped but they will almost always
be on quantization boundaries.  Do we even need to show things that aren't quantized,
they'll happen almost instantly and will just flash on and off.

No, only show quantized or pending events.

We're constrained on the left and right edges for text so have to shift the label to
the left or right.

For markers at the end, point right rather than up and put them with the text.

There can be more than one event at any given marker, if there is more than one
they stack.

Wait, there can be events scheduled in the future that are not quantized if scripts
are doing millisecond based scheduling.  I guess allow those.  check to see if event
time is more than a few milliseconds away from current time.

Rather than trying to fit everything on a horizontal line, it could be jsut as useful
to have a vertical box with all events, give them small icons, then use  the icons on
the timeline.  Hmm, liking that.

Could even reduce this to single upper case characters or meaningful icons

Almost all events will be associated with the start/end of a major or minor mode.

Give each of those a unique letter.

MobiusEventState

    class FunctionDefinition* function;
    long      frame;
    long      argument;

Hmm so no, not associated with modes, associated with Functions
Start/end can be derived by examining the current Mode but some won't be active
till a future event.  e.g. start/end overdub one or more quantize points away.

This shouldn't be too hard to determine.

If we can determine start/end use green red for the markers.

Is it true that all events will be associated with functions?  What about Record End etc.

Track puts the event summary in the MobiusState

    // this really belongs in TrackState...
    mEventManager->getEventSummary(s->loop);

EventManager does the work

Variable uses EventManager and formats a summary of events for debugging

The fields of interest for debugging were

  e->type->name
  e->pending
  e->e->frame
  CHILD EVENTS!
    some sort of index number and c->type->name

EventManager has this logic

This is interesting
                Loop* nextLoop = e->fields.loopSwitch.nextLoop;
                if (e->type == ReturnEvent)
                  s->returnLoop = nextLoop->getNumber();

if the event is a ReturnEvent then we set
  LoopState returnLoop to the next loop number, this isn't
  part of the EventSummary, seems like it would be better if it were
  this is the only place where returnLoop is set

If this is a SwitchEvent
                else if (e->type == SwitchEvent) {
                    s->nextLoop = nextLoop->getNumber();
                    // and the events stacked after the switch
                    for (Event* se = e->getChildren() ; 
                         se != NULL && s->eventCount < MAX_INFO_EVENTS ;
                         se = se->getSibling())
                      getEventSummary(s, se, true);
                }
            }
again an interesting field s->nextLoop is set on the LoopState rather than the event
and there are child events representing things stacked under the Switch

there is visibility filtering

 * Display only "meaningful" events, not things like JumpPlay that
 * we schedule as a child of another event.  In most cases, 
 * if an event is quantized or pending, it should be displayed.
 * Displaying unquantized events, even if they are the primary event
 * for a function can result in flicker since we will be processing
 * them almost immediately.  
 *
 * One exception is Script events, which are used to wait for a 
 * specific frame.  These aren't quantized, but they do need to be visible.
 *
 * The "stacked" arg is false when we have a top-level event, and true
 * when we have a child event of one of the top level events.  This
 * indicates that the event is in a "stack" such as with LoopSwitchEvent.
 *
 * UPDATE 2012
 * 
 * This had some confusing logic that was preventing rescheduled
 * events from being drawn because they had a frame in the future
 * but were not quantized.  I don't like the idea of being smart
 * about hiding, if the goal for this was just to reduce flicker
 * then we can try looking at the distance between the event and the
 * current frame.  If they're too close then don't bother displaying.
 *
 * OLD COMMENTS:
 *
 * The trick here is for "automatic" events stacked after
 * the SwitchEvent to implement transfer modes.  We will always
 * generate a full set of events to force the loop into the desired
 * play state, but to avoid clutter in the UI, only display those that
 * are different than the current play state.
 *
 * UPDATE: no longer scheduling automatic events but keep this
 * around for awhile in case we need it.

Yeah, had similar thoughts then
Some of the old display logic revolves around using the EventType pointer
stored in the EventSummary to get names.  This would require that they be
part of the external model.

There are a lot of those

extern EventType* InvokeEvent;
extern EventType* ValidateEvent;
extern EventType* RecordEvent;
extern EventType* RecordStopEvent;
extern EventType* PlayEvent;
extern EventType* OverdubEvent;
extern EventType* MultiplyEvent;
extern EventType* MultiplyEndEvent;
extern EventType* InstantMultiplyEvent;
extern EventType* InstantDivideEvent;
extern EventType* InsertEvent;
extern EventType* InsertEndEvent;
extern EventType* StutterEvent;
extern EventType* ReplaceEvent;
extern EventType* SubstituteEvent;
extern EventType* LoopEvent;
extern EventType* CycleEvent;
extern EventType* SubCycleEvent;
extern EventType* ReverseEvent;
extern EventType* ReversePlayEvent;
extern EventType* SpeedEvent;
extern EventType* RateEvent;
extern EventType* PitchEvent;
extern EventType* BounceEvent;
extern EventType* MuteEvent;
extern EventType* PlayEvent;
extern EventType* JumpPlayEvent;
extern EventType* UndoEvent;
extern EventType* RedoEvent;
extern EventType* ScriptEvent;
extern EventType* StartPointEvent;
extern EventType* RealignEvent;
extern EventType* MidiStartEvent;
extern EventType* SwitchEvent;
extern EventType* ReturnEvent;
extern EventType* SUSReturnEvent;
extern EventType* TrackEvent;
extern EventType* RunScriptEvent;
extern EventType* SampleTriggerEvent;
extern EventType* SyncEvent;
extern EventType* SlipEvent;
extern EventType* MoveEvent;
extern EventType* ShuffleEvent;
extern EventType* SyncCheckEvent;
extern EventType* MidiOutEvent;

InvokeEvent is used for all? Function invocations rather than having
an event type for every function.

Old code had to use CSects because event summaries were apparently believed
to be too expensive to maintain at the end of every interrupt, it waited
for the MobiusLoop refresh interval.

In fact I think all state maintance was left till then so the same applies.
When this is brought over encapuslate all this in a Summarizer

Since MobiusState was not a fundamental model we can change it.

EventType has gobs of implementation in it, so need to factor out a set
of UI constants.  Kind of liking the UI prefix convention for models that
contain only UI related information.  This would also solve the eventual
name conflicts with Function

Parameter we might be able to share or we could use namespaces.  In core Mobius
we'll have to use the UI:: prefix but that's isolated.  Hmm, liking this

  UI::Action in the enging

  namespace UI;
  Parameter outside

kind of a pita though to remember namespaces, but would be good for the future anyway

This is the core summarizer

PRIVATE void EventManager::getEventSummary(LoopState* s, Event* e, bool stacked)
{
    if (isEventVisible(e, stacked)) {

        EventSummary* sum = &(s->events[s->eventCount]);
        sum->type = e->type;
        sum->function = e->function;

        //Trace(mTrack, 2, "Adding event summary %s\n", e->function->name);

		// Events with a meaningful integer argument are expected to
		// put it here.  The UI does not understand the difference between
		// events so set this non-zero only if relevant.
        sum->argument = e->number;

		// usually defines its own frame
		long frame = e->frame;

        Loop* loop = mTrack->getLoop();

		if (stacked) {
			// frame dependent on parent
            Event* p = e->getParent();
			if (!p->pending)
			  frame = p->frame;
			else {
				// must be in Confirm mode make it look pending
				frame = loop->getFrames();
			}
		}
		else if (e->pending) {
			// make it look like it is after the loop
			frame = loop->getFrames();
		}

        if (loop->isReverse())
          frame = reflectFrame(loop, frame);
        sum->frame = frame;

        s->eventCount++;
    }
}

The primary fields are e->type and e->funtion
sum->argument comes from the event
seems to be no modeling of child events other than adjusting the frame relative to the parent


                visible = (e->quantized || e->pending || e->
                           type == ScriptEvent ||
                           // negative might be for reverse reflection?
                           delta < 0 ||
                           // this should be sensntive to latency?
                           delta > 1024);

Engine was already doing quantize visibility so shouldn't have to duplicate that.
The main complication is EventType and Function

We need Definition objects for every possible type and map from internal types to external.
Some of these will almost certainly hidden like JumpPlayEvent or don't
need to be visible but if we're going to use ordinal mapping, still need to have placeholders
in the mapping array.  Nice to be able to load up the UI model with things like
icons or display hints.

I'm thiking subclassing definition classes in the engine will be messy, or at least something
we can put off till later so fast mapping between them with ordinals is good.  There may be some
duplication though.

To avoid duplication consider a mapping setup stage during engine initialization
that copies things from the external model to the internal model, this could also
provide the mapping

  external
    class UISomething
      void *internalSomething;


  internal
    class Something
      void* externalSomething;

  MobiusInterface::startup
     for every internal
        set externalSomething = UISomething
        set UISomething.internalSomething = this
        this step can lookup by name rather than orrdinal so we don't have to clutter
        external arrays with placeholders

What I want for the external model

  UIEventType
    name, display
    icon
    hidden
    character
    other stuff








Old display code

			// then the markers
			if (mMarkers) {

                //Trace(2, "*** Drawing Markers ***\n");

				// keep track of the text bounds of the event names as we paint
				// them so we can detect overlap and reposition
				Bounds nameBounds[MAX_INFO_EVENTS];
        
				for (int i = 0 ; i < mState.eventCount ; i++) {
					EventSummary* sum = &(mState.events[i]);
					EventType* type = sum->type;
					Function* f = sum->function;
					long frame = sum->frame;
					int argument = sum->argument;

					int offset = 0;
					if (mState.frames > 0)
					  offset = (int)(((float)(width) / (float)mState.frames) * frame);
					int x1 = left + offset;
					int y1 = top;
					int x2 = x1 - MARKER_SIZE;
					int y2 = y1 + MARKER_SIZE;
					int x3 = x1 + MARKER_SIZE;
					int y3 = y2;

					// if we're recording the initial loop, make all events
					// look like they're off the right edge, this should only
					// happen for things like SUSReturnEvent 
					if (mState.frames == 0)
					  x1 = right + 1;

					if (x1 < left) {
						// must be negative event in the next loop
						// !! this is farther from the left edge than
						// the right edge calculations below, something's off
						x1 = mb.x - MARKER_SIZE * 2;
						y1 = top + MARKER_SIZE;
						x2 = x1 + MARKER_SIZE;
						y2 = y1 - MARKER_SIZE;
						x3 = x2;
						y3 = y1 + MARKER_SIZE;
					}
					else if (x1 > right) {
						// event is greater than the current range
						// rotate so it points right
						x1 = right + MARKER_SIZE * 2;
						y1 = top + MARKER_SIZE;
						x2 = x1 - MARKER_SIZE;
						y2 = y1 - MARKER_SIZE;
						x3 = x2;
						y3 = y1 + MARKER_SIZE;
					}
			
					g->setColor(mEventColor);
					g->drawLine(x1, y1, x2, y2);
					g->drawLine(x2, y2, x3, y3);
					g->drawLine(x3, y3, x1, y1);

					// sigh, the name to display is complicated, should just
					// have MobiusState return the proper display name?
			
					const char* eventName;
					if (f != NULL && f->eventType == type) {
						// the initiating event, many functions may use the
						// same event so get the name from the function
						eventName = f->getDisplayName();
					}
					else if (type == InvokeEvent) {
						// a speical event for deferred invocation, use
						// the function name
						eventName = f->getDisplayName();
					}
					else {
						// An alternate ending, commonly here with
						// RecordStopEvent for one of many functions
						// use the event name.
						eventName = type->name;
					}
				
					paintEventName(g, f, eventName, argument, &b, x1, y1,
								   nameBounds, i);

                    //Trace(2, "Marker %s\n", eventName);

				}
			}
		}
	}
